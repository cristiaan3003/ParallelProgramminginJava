Module 3 Quiz

1. Pregunta 1 -  OK
Given the following sequential code fragment and assuming N > 2, which of the possible approaches using forall loops (pseudocode introduced in Lecture 3.1) will produce functionally equivalent values in the arrays x and y? Note that a range like "i : [0 : N]" in the forall pseudocode is assumed to be an inclusive range that includes both the lower bound (0) and the upper bound (N).

C

2. Pregunta 2 - OK
Given the following sequential code fragment:
c = 0;
for (i = 0; i <= N; i++) {
  c = c + a[i];
}
println("c = " + c);

c = 0;
forall (i : [0 : N]) {
  c = c + a[i];
}
println("c = " + c);



A. The parallel code exhibits data races and structural determinism, but not functional determinism.



3. Pregunta 3 - OK
Assume that forall is implemented using a finish scope containing a sequential for loop in which each iteration is implemented as a parallel async task.

Given the following two versions of code that attempt to parallelize a matrix multiplication computation (introduced in Lecture 3.2). We now use a slightly different notation for forall loops that corresponds to actual code (in the PCDP library) rather than pseudocode. The lower and upper bound parameters for the forall constructs still represent inclusive ranges.


// Version 1
forall(0, N - 1, 0, N - 1, (i, j) -> {
  C[i][j] = 0;
  for (int k = 0; k < N; k++) {
    C[i][j] += A[i][k] * B[k][j];
  }
});        

// Version 2
forall(0, N - 1, (i) -> {
  forall(0, N - 1, (j) -> {
    C[i][j] = 0;
    for (int k = 0; k < N; k++) {
      C[i][j] += A[i][k] * B[k][j];
    }
  });
});

C

4. Pregunta 4 - OK
Recall that barriers were introduced in Lecture 3.3. True or false, the following code snippet that uses barriers can exhibit a data race?


False

5. Pregunta 5 - OK
Recall that barriers were introduced in Lecture 3.3. Which of the choices is a legal ordering of the print statements in the code snippet below?

forall (0, 1, (i) -> {
  println(“Hello from iteration “ + i);
  barrier;
  println(“Continuing iteration “ + i);
  barrier;
  println(“Finishing iteration “ + i);
});

A

6. Pregunta 6 - OK
Consider the code below, and recall that barriers were introduced in Lecture 3.3. Which of the choices is a functionally equivalent barrier-based parallel program?

forall (0, 3, (i) -> {
  sum[i] = i;
});
forall (0, 3, (i) -> {
  sum[i] += sum[i + 1];
});

A

7. Pregunta 7 - OK
What was the primary benefit of using barriers in the one-dimensional iterative averaging example studied in Lecture 3.4?

B

8. Pregunta 8 - 
Which of the following is true about iteration grouping/chunking for parallel loops (as introduced in Lecture 3.5)?


C

9. Pregunta 9 
Given the sequential code snippet below:

for (i = 1; i <= 100; i++) {
  a[i] = b[i] + c[i + 10];
}

And four parallel versions of the above code snippet, which of the provided parallel versions is correct?


10. Pregunta 10 - OK
In general, recalling the contents of Lecture 3.5, what is a good heuristic for setting the number of chunks in a forall parallel loop?

A. The number of chunks should be similar to the number of hardware cores in the platform.




